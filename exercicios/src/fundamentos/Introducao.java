package fundamentos;

public class Introducao {
	
	/*
	 * LINGUAGEM DE BAIXO E ALTO NÍVEL

	Baixo nível: está mais próxima ao computador, ou seja, a linguagem de máquina como 
por exemplo Assembly.
	Alto nível: está mais próxima do programador, ou seja, mais fácil de desenvolver 
e entender, mais próxima à linguagem do ser humano, é também mais prática. 
Exemplo: java, C#, javaScript, etc.

	 * FORMAS DE REPRESENTAÇÃO:

- Fluxogramas
- Linguagem NATURAL (português, inglês, alemão, etc). Essa forma de representação
tem como desvantagem a ambiguidade, ou seja, nem sempre o receptor vai conseguir 
entender o que está querendo ser passado.
- Linguagem ARTIFICIAL (php, java, C#, etc). Não tem problema com ambiguidade por
possuir padrões.
- Pseudo-Linguagem (linguagem usada no VISUALG, ela mistura a linguagem artificial
com a natural.

	 * TIPOS DE ALGORITMOS EM RELAÇÃO A ENTRADA E SAÍDA DE DADOS

1 - Possui entrada(s) e gera uma(s) saída;

2 - Possui apenas entradas(s);

3 - Possui apenas saída(s);

4 - Não possui entrada e nem saída.

OBS: Maior parte das linguagens de programação geram apenas uma saída. 
Essa saída pode conter vários dados.

Bug: resultado gerado a partir da sequência de passos ERRADO (não é o que queria).
Mesmos os passos definidos de forma correta, executados na sequência errada, podem
gerar um bug ou um desempenho ruim pro algoritmo.
			<<A ORDEM DOS PASSOS É EXTREMAMENTE IMPORTANTE>>

	 * EXEMPLOS DE ESTRUTURA DE DADOS CLÁSSICAS:

FIFO (first in, first out) = segue a dinâmica da fila, primeiro a entrar é o primeiro a sair.

LIFO (last in, first out) = dinâmica da pilha, último a entrar é o primeiro a sair.

ÁRVORE = pastas e sub pastas para organizar os dados.

TABELA = organizar os dados em colunas e linhas.

	 * 
	 */
	

}
